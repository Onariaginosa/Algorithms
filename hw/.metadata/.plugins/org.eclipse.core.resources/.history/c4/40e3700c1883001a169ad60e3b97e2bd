package huffman;

import java.util.*;

/**
 * Huffman instances provide reusable Huffman Encoding Maps for compressing and
 * decompressing text corpi with comparable distributions of characters.
 */
public class Huffman {

	// -----------------------------------------------
	// Construction
	// -----------------------------------------------

	private HuffNode trieRoot;
	private TreeMap<Character, String> encodingMap;
	private int longestEncodingLength = 0;

	/**
	 * Creates the Huffman Trie and Encoding Map using the character distributions
	 * in the given text corpus
	 * 
	 * @param corpus A String representing a message / document corpus with
	 *               distributions over characters that are implicitly used
	 *               throughout the methods that follow. Note: this corpus ONLY
	 *               establishes the Encoding Map; later compressed corpi may
	 *               differ.
	 */

	Huffman(String corpus) {
		TreeMap<Character, Integer> distribution = charDistribution(corpus);
		buildTrie(distribution);
		encodingMap = new TreeMap<Character, String>();
		createEncodingMap(this.trieRoot, "");
	}

	private TreeMap<Character, Integer> charDistribution(String corpus) {
		TreeMap<Character, Integer> distribution = new TreeMap<Character, Integer>();
		for (char character : corpus.toCharArray()) {
			if (distribution.containsKey(character)) {
				distribution.replace(character, distribution.get(character) + 1);
			} else {
				distribution.put(character, 1);
			}
		}
		return distribution;
	}

	private void buildTrie(TreeMap<Character, Integer> charDist) {
		PriorityQueue<HuffNode> queue = new PriorityQueue<HuffNode>();
		for (char c : charDist.keySet()) {
			queue.add(new HuffNode(c, charDist.get(c)));
		}
		HuffNode right, left, parent = null;
		while (queue.size() > 1) {
			left = queue.poll();
			right = queue.poll();
			parent = new HuffNode('\0', (left.count + right.count));
			parent.left = left;
			parent.right = right;
			queue.add(parent);
		}
		if (queue.size() == 1) {
			this.trieRoot = queue.poll();
		}
	}

	private void createEncodingMap(HuffNode current, String collected) {
		if (current.isLeaf()) {
			encodingMap.put(current.character, collected);
			this.longestEncodingLength = collected.length();
		} else {
			createEncodingMap(current.left, collected + "0");
			createEncodingMap(current.right, collected + "1");
		}
	}

	// -----------------------------------------------
	// Compression
	// -----------------------------------------------

	/**
	 * Compresses the given String message / text corpus into its Huffman coded
	 * bitstring, as represented by an array of bytes. Uses the encodingMap field
	 * generated during construction for this purpose.
	 * 
	 * @param message String representing the corpus to compress.
	 * @return {@code byte[]} representing the compressed corpus with the Huffman
	 *         coded bytecode. Formatted as 3 components: (1) the first byte
	 *         contains the number of characters in the message, (2) the bitstring
	 *         containing the message itself, (3) possible 0-padding on the final
	 *         byte.
	 */
	public byte[] compress(String message) {
		String msg = "";
		for (char c : message.toCharArray()) {
			msg += encodingMap.get(c);
		} 
		// add the padding
		while (msg.length() % 8 != 0) {
			msg += "0";
		}
		
		System.out.println("PRINTING MSG");
		System.out.println(msg);
		

		byte[] result = new byte[msg.length() / 8 + 1];
		Integer currentInt = message.length();
		result[0] = currentInt.byteValue();
		int i = 0;
		int j = 1;

		while (i + 8 <= msg.length()) {
			currentInt = Integer.parseInt(msg.substring(i, i + 8), 2);
			result[j] = currentInt.byteValue();
			i += 8;
			j++;
		}

		return result;
	}

	// -----------------------------------------------
	// Decompression
	// -----------------------------------------------

	/**
	 * Decompresses the given compressed array of bytes into their original, String
	 * representation. Uses the trieRoot field (the Huffman Trie) that generated the
	 * compressed message during decoding.
	 * 
	 * @param compressedMsg {@code byte[]} representing the compressed corpus with
	 *                      the Huffman coded bytecode. Formatted as 3 components:
	 *                      (1) the first byte contains the number of characters in
	 *                      the message, (2) the bitstring containing the message
	 *                      itself, (3) possible 0-padding on the final byte.
	 * @return Decompressed String representation of the compressed bytecode
	 *         message.
	 */
	public String decompress(byte[] compressedMsg) {
		int size = compressedMsg[0];
		String result = "";
		String cMsg = "";
		int currentLength = 1;
		String subStr;
		int completed = 0;

		for (int i = 1; i < compressedMsg.length; i++) {
			subStr = Integer.toBinaryString((compressedMsg[i] + 256) % 256);
			while (subStr.length() % 8 != 0) {
				subStr = "0" + subStr;
			}
			cMsg = cMsg + subStr;
		}
		System.out.println("PRINTING CMSG");
		System.out.println(cMsg);
		
		System.out.println("PRINTING LONGEST E LENGTH");
		System.out.println(longestEncodingLength);
		System.out.println("PRINTING ' ' bitcode");
		System.out.println(encodingMap.get(' '));
		System.out.println("PRINTING '.' bitcode");
		System.out.println(encodingMap.get('.'));
		while (size > 0) {
			while (currentLength <= this.longestEncodingLength) {
				subStr = cMsg.substring(completed, currentLength);
				if (encodingMap.containsValue(subStr)) {
					for (char c : this.encodingMap.keySet()) {
						if (encodingMap.get(c).equals(subStr)) {
							System.out.println("PRINTING bit found");
							System.out.println(subStr);
							result += c;
							cMsg = cMsg.substring(currentLength);
							completed += currentLength;
							break;
						}
					}
					break;
				} else {
					currentLength++;
				}
			}
			size--;
			currentLength = 1;
		}

		return result;
	}

	// -----------------------------------------------
	// Huffman Trie
	// -----------------------------------------------

	/**
	 * Huffman Trie Node class used in construction of the Huffman Trie. Each node
	 * is a binary (having at most a left and right child), contains a character
	 * field that it represents (in the case of a leaf, otherwise the null character
	 * \0), and a count field that holds the number of times the node's character
	 * (or those in its subtrees, in the case of inner nodes) appear in the corpus.
	 */
	private static class HuffNode implements Comparable<HuffNode> {

		HuffNode left, right;
		char character;
		int count;

		HuffNode(char character, int count) {
			this.count = count;
			this.character = character;
		}

		public boolean isLeaf() {
			return left == null && right == null;
		}

		public int compareTo(HuffNode other) {
			return this.count - other.count;
		}

	}

}
