package csp;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.*;

/**
 * CSP: Calendar Satisfaction Problem Solver
 * Provides a solution for scheduling some n meetings in a given
 * period of time and according to some set of unary and binary 
 * constraints on the dates of each meeting.
 */
public class CSP {
	
	
	/**
	A Calendar Satisfaction Problem is implemented and solved by the CSP.solve method, parameterized by 4 inputs:

		int nMeetings describing how many meetings need to be scheduled, and are indexed from 0 to n-1.

		LocalDate rangeStart The start date (inclusive) of the domains of each of the n meeting-variables

		LocalDate rangeEnd The end date (inclusive) of the domains of each of the n meeting-variables

		Set<DateConstraint> constraints A Set of date constraints on the meeting times in the formats specified above.
	**/

	/**
	 *   @Test 
  public void CSP_t_Ex() {
      Set<DateConstraint> constraints = new HashSet<>(
          Arrays.asList(
              new UnaryDateConstraint(0, "!=", LocalDate.of(2019, 1, 2)),
              new UnaryDateConstraint(2, "<", LocalDate.of(2019, 1, 3)),
              new BinaryDateConstraint(0, "!=", 1),
              new BinaryDateConstraint(1, "==", 2)
          )
      );
      
      List<LocalDate> solution = CSP.solve(
          3,                          // Number of meetings to schedule
          LocalDate.of(2019, 1, 1),   // Domain start date
          LocalDate.of(2019, 1, 3),   // Domain end date
          constraints                 // Constraints all meetings must satisfy
      );
      
      testSolution(solution, constraints);
  }
	 */
	
	
    /**
     * Public interface for the CSP solver in which the number of meetings,
     * range of allowable dates for each meeting, and constraints on meeting
     * times are specified.
     * @param nMeetings The number of meetings that must be scheduled, indexed from 0 to n-1
     * @param rangeStart The start date (inclusive) of the domains of each of the n meeting-variables
     * @param rangeEnd The end date (inclusive) of the domains of each of the n meeting-variables
     * @param constraints Date constraints on the meeting times (unary and binary for this assignment)
     * @return A list of dates that satisfies each of the constraints for each of the n meetings,
     *         indexed by the variable they satisfy, or null if no solution exists.
     */
    public static List<LocalDate> solve (int nMeetings, LocalDate rangeStart, LocalDate rangeEnd, Set<DateConstraint> constraints) {
        throw new UnsupportedOperationException();
    }
    
    private static int AC3 () {
    	// who tf knows
    	throw new UnsupportedOperationException();
    }
    
    // all dateVars
    
    private static Set<DateVar> createDateVars (int nMeetings, LocalDate rangeStart, LocalDate rangeEnd, Set<DateConstraint> constraints) {
    	Set<DateVar> meetingSet = new HashSet<DateVar>();
    	DateVar current;
    	Set<LocalDate> domain = getPossibleDates(rangeStart, rangeEnd);
    	Set<DateConstraint> filteredConstraint;
    	for (int i = 0; i <nMeetings; i++) {
    		filteredConstraint = filterConstraints(i, constraints);
    		current = new DateVar(i,domain, filteredConstraint);
    	}
    	return meetingSet;
    }
    private static Set<LocalDate> getPossibleDates(LocalDate rangeStart, LocalDate rangeEnd) {
    	Set<LocalDate> dates = rangeStart.datesUntil(rangeEnd).collect(Collectors.toSet());
    	dates.add(rangeEnd);
    	return dates;
    }
    private static Set<DateConstraint> filterConstraints(int meeting, Set<DateConstraint> constraints){
    	Set<DateConstraint> filteredConstraints = new HashSet<DateConstraint>();
    	for(DateConstraint currentConstraint : constraints) {
    		if(currentConstraint.L_VAL == meeting) {
    			filteredConstraints.add(currentConstraint);
    		}
    	}
    	
    	return filteredConstraints;
    }
    
    
    
    private static class DateVar {
    	LocalDate currentMeeting;
    	Set<LocalDate> domain;
    	int meeting;
    	Set<DateConstraint> constraints;
    	
    	DateVar(int meeting, Set<LocalDate> domain, Set<DateConstraint> constraints) {
    		this.meeting = meeting;
    		this.domain = domain;
    		this.constraints = constraints;
    	}
    }
    
}
