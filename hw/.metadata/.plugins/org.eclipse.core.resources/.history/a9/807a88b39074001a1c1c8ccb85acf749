package spellex;

import java.util.*;

public class SpellEx {
    
    // Note: Not quite as space-conscious as a Bloom Filter,
    // nor a Trie, but since those aren't in the JCF, this map 
    // will get the job done for simplicity of the assignment
    private Map<String, Integer> dict;
    
    // For your convenience, you might need this array of the
    // alphabet's letters for a method
    private static final char[] LETTERS = "abcdefghijklmnopqrstuvwxyz".toCharArray();

    /**
     * Constructs a new SpellEx spelling corrector from a given
     * "dictionary" of words mapped to their frequencies found
     * in some corpus (with the higher counts being the more
     * prevalent, and thus, the more likely to be suggested)
     * @param words The map of words to their frequencies
     */
    SpellEx(Map<String, Integer> words) {
        dict = new HashMap<String, Integer>(words);
    }
    
    /**
     * Returns the edit distance between the two input Strings
     * s0 and s1 based on the minimal number of insertions, deletions,
     * replacements, and transpositions required to transform s0
     * into s1
     * @param s0 A "start" String
     * @param s1 A "destination" String
     * @return The minimal edit distance between s0 and s1
     */
    public static int editDistance (String s0, String s1) {
    	int rowSize = s0.length()+1;
    	int colSize = s1.length()+1;
    	int[][] editTable = new int[rowSize][colSize];
    	int transposition = Integer.MAX_VALUE;
    	
    	for(int r = 0; r < rowSize; r++) {
    		for(int c = 0; c < colSize; c++) {
    			if(r == 0) {
    				editTable[r][c] = c;
    			} else if(c == 0) {
    				editTable[r][c] = r;
    			} else if (s0.charAt(r-1) == s1.charAt(c-1)) {
    				editTable[r][c] = editTable[r-1][c-1];
    			} else {
    				if(r > 1 && c > 1 && s0.charAt(r-1) == s1.charAt(c-2) && s0.charAt(r-2) == s1.charAt(c-1)) {
    					transposition = editTable[r-2][c-2];
    				}
    				editTable[r][c] = 1 + Math.min(Math.min(editTable[r][c-1], // Insertion
    						                       editTable[r-1][c]), // Removal
    						                       Math.min(editTable[r-1][c-1], //Replacement
    						                       transposition));
    				transposition = Integer.MAX_VALUE;
    			}
    		}
    	}
    	
    	return editTable[rowSize-1][colSize-1];
    }
    
    /**
     * Returns the n closest words in the dictionary to the given word,
     * where "closest" is defined by:
     * <ul>
     *   <li>Minimal edit distance (with ties broken by:)
     *   <li>Largest count / frequency in the dictionary (with ties broken by:)
     *   <li>Ascending alphabetic order
     * </ul>
     * @param word The word we are comparing against the closest in the dictionary
     * @param n The number of least-distant suggestions desired
     * @return A set of up to n suggestions closest to the given word
     */
    public Set<String> getNLeastDistant (String word, int n) {
////    	mapping the string value to the edit distance
//    	Set<String> nLeastDistant = new HashSet<String>();
//    	Map<String, Integer> foundWords = null;
//    	int returnWords = 0;
//    	for( String word2 : dict.keySet()) {
//    		foundWords.put(word2, SpellEx.editDistance(word, word2));
//    	}
//    	Map<String,Integer> sortedWords = sortByValues((HashMap<String, Integer>) foundWords);
//    	for(String key : foundWords.keySet()) {
//    		if(nLeastDistant.size() < n) {
//    			
//    		}
//    	}
    	
    	
    	
        throw new UnsupportedOperationException();
    }
    
    public void testHashMap() {
    	transpositionHelper("0123456789");
    	
    }
    
    /**
     * Returns the set of n most frequent words in the dictionary to occur with
     * edit distance distMax or less compared to the given word. Ties in
     * max frequency are broken with ascending alphabetic order.
     * @param word The word to compare to those in the dictionary
     * @param n The number of suggested words to return
     * @param distMax The maximum edit distance (inclusive) that suggested / returned 
     * words from the dictionary can stray from the given word
     * @return The set of n suggested words from the dictionary with edit distance
     * distMax or less that have the highest frequency.
     */
    public Set<String> getNBestUnderDistance (String word, int n, int distMax) {
    	Set<String> oldWords = new TreeSet<String>();
    	Set<String> newWords = new TreeSet<String>();
    	Set<String> candidates = new TreeSet<String>();
    	oldWords.add(word);
    	for(int i = 0; i < distMax; i++) {
    		System.out.println("Candidates 0: ");
    		for(String oldWord : oldWords) {
	    		// add insertion to candadite set
	    		newWords.addAll(insertionHelper(oldWord));
	    		// add deletion to candidate set
	    		newWords.addAll(deletionHelper(oldWord));
	    		// add transposition to candidate set
	    		newWords.addAll(transpositionHelper(oldWord));
	    		// add replacement to candidate set
	    		newWords.addAll(replacementHelper(oldWord));
    		}
    		System.out.println("Candidates 1: ");
    		for(String newWord: newWords) {
    			if(dict.containsKey(newWord)) {
    				candidates.add(newWord);
    				System.out.println("Candidates 2: ");
    			}
    		}
    		System.out.println("Candidates 3: ");
    		oldWords = newWords;
    		newWords = new TreeSet<String>();
    	}
    	System.out.println("Candidates 4: ");
    	System.out.println(candidates);
    	//weed out candidates
    		
    	
    	
    	
    	return candidates;
    }
    
    private Set<String> insertionHelper(String word) {
    	Set<String> insertionWords = new TreeSet<String>();
    	for(char letter : LETTERS) {
    		for(int i = 0; i <= word.length(); i++) {
    			insertionWords.add(word.substring(0, i) + letter + word.substring(i));
    		}
    	}
    	return insertionWords;
    }
    
    private Set<String> deletionHelper(String word) {
    	Set<String> deletionWords = new TreeSet<String>();
		for(int i = 0; i < word.length(); i++) {
			deletionWords.add(word.substring(0, i) + word.substring(i+1));
		}
    	return deletionWords;
    }
    
    private Set<String> replacementHelper(String word) {
    	Set<String> replacementWords = new TreeSet<String>();
    	for (char letter : LETTERS) {
			for(int i = 0; i < word.length(); i++) {
				replacementWords.add(word.substring(0, i) + letter + word.substring(i+1));
			}
		}
    	return replacementWords;
    }
    private Set<String> transpositionHelper(String word) {
    	Set<String> transpositionWords = new TreeSet<String>();
		for(int i = 0; i < word.length(); i++) {
			transpositionWords.add(word.substring(0, i) + word.substring(i+1, i+2) + word.substring(i, i+1) + word.substring(i+2));
		}
    	return transpositionWords;
    }
    
    
}

