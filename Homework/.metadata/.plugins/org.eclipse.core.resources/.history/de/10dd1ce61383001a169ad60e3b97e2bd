package huffman;

import static org.junit.Assert.*;
import org.junit.Test;

public class HuffmanTests {
    
    // Compression Tests
    // -----------------------------------------------
    @Test
    public void comp_t0() {
        Huffman h = new Huffman("AB");
        // byte 0: 0000 0010 = 2 (message length = 2)
        // byte 1: 0100 0000 = 64 (0 = "A", 1 = "B")
        // [!] Only first 2 bits of byte 1 are meaningful
        byte[] compressed = {2, 64};
        assertArrayEquals(compressed, h.compress("AB"));
    }
    
    @Test
    public void comp_t1() {
        Huffman h = new Huffman("AB");
        // byte 0: 0000 0010 = 2 (message length = 2)
        // byte 1: 1000 0000 = -128 (0 = "A", 1 = "B")
        // [!] Only first 2 bits of byte 1 are meaningful
        byte[] compressed = {2, -128};
        assertArrayEquals(compressed, h.compress("BA"));
    }
    
    @Test
    public void comp_t2() {
        Huffman h = new Huffman("ABBBCC");
        // byte 0: 0000 0110 = 6 (message length = 6)
        // byte 1: 1000 0111 = -121 (10 = "A", 0 = "B", C = 11)
        // byte 2: 1000 0000 = -128
        // [!] Only first bit of byte 2 is meaningful
        byte[] compressed = {6, -121, -128};
        assertArrayEquals(compressed, h.compress("ABBBCC"));
    }
    
    @Test
    public void comp_t3() {
        Huffman h = new Huffman("ABBBCC");
        // byte 0: 0000 0110 = 6 (message length = 6)
        // byte 1: 0100 1101 = 77 (10 = "A", 0 = "B", C = 11)
        // byte 2: 1000 0000 = -128
        byte[] compressed = {6, 77, -128};
        assertArrayEquals(compressed, h.compress("BABCBC"));
    }
    
    
    // Decompression Tests
    // -----------------------------------------------
    @Test
    public void decomp_t0() {
        Huffman h = new Huffman("AB");
        // byte 0: 0000 0010 = 2 (message length = 2)
        // byte 1: 0100 0000 = 64 (0 = "A", 1 = "B")
        byte[] compressed = {2, 64};
        assertEquals("AB", h.decompress(compressed));
    }
    
    @Test
    public void decomp_t1() {
        Huffman h = new Huffman("AB");
        // byte 0: 0000 0010 = 2 (message length = 2)
        // byte 1: 1000 0000 = -128 (0 = "A", 1 = "B")
        byte[] compressed = {2, -128};
        assertEquals("BA", h.decompress(compressed));
    }
    
    @Test
    public void decom_t3() {
        Huffman h = new Huffman("ABBBCC");
        // byte 0: 0000 0110 = 6 (message length = 6)
        // byte 1: 1000 0111 = -121 (10 = "A", 0 = "B", C = 11)
        // byte 2: 1000 0000 = -128
        byte[] compressed = {6, -121, -128};
        assertEquals("ABBBCC", h.decompress(compressed));
    }
    
    @Test
    public void decom_t4() {
        Huffman h = new Huffman("ABBBCC");
        // byte 0: 0000 0110 = 6 (message length = 6)
        // byte 1: 0100 1101 = 77 (10 = "A", 0 = "B", C = 11)
        // byte 2: 1000 0000 = -128
        byte[] compressed = {6, 77, -128};
        assertEquals("BABCBC", h.decompress(compressed));
    }
   // @Test 
//    public void constructorTest1() {
//    	Huffman h = new Huffman("AB");
//    	assertEquals(2, h.encodingMap.size());
//    	assertEquals("0", h.encodingMap.get('A'));
//    	assertEquals("1", h.encodingMap.get('B'));
//    }
//    
    //@Test 
//    public void constructorTest2() {
//    	Huffman h = new Huffman("ABBBCC");
//    	assertEquals(3, h.encodingMap.size());
//    	assertEquals("0", h.encodingMap.get('B'));
//    	assertEquals("10", h.encodingMap.get('A'));
//    	assertEquals("11", h.encodingMap.get('C'));
//    }
    
    @Test // Just one space and a period
    public void compAndDecomp_t4(){
        Huffman h = new Huffman(" akjbf ewajkcuisghvbiua.we kjfcsd");
        byte[] compressed = h.compress(" .");
        System.out.print(compressed);
        assertEquals(" .", h.decompress(compressed));
    }    
    @Test //Where the corpus frequency is the opposite of the message content
    public void compAndDecomp_t5(){
        Huffman h = new Huffman("abbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiiijjjjjjjjjjkkkkkkkkkkklllllllllllllll");
        byte[] compressed = h.compress("aaabbaaabcaaaacc");
        assertEquals("aaabbaaabcaaaacc", h.decompress(compressed));
    }    
    @Test // Where single char bitcode is larger than a single bit
    public void compAndDecomp_t6(){
        Huffman h = new Huffman("!@#$%^&*()_+1234567890-=QWE÷RUIOP{}ASDF×  ø GHJKL:ZX¶CVBNM<>?¡qwert©yuÑiop[]asdfgh§j¬kl;'zxcvbnm,./aaaaa'");
        byte[] compresed = h.compress("aaabcaaabcdsaaaaaaaaaø");
        assertEquals("aaabcaaabcdsaaaaaaaaaø", h.decompress(compresed));
    }
    @Test
    public void babyCorpus_t0(){
        Huffman h = new Huffman(" .");
        byte[] compressed = h.compress("  . .. ..    . . . ..  . . ");
        assertEquals("  . .. ..    . . . ..  . . ", h.decompress(compressed));
    }    @Test
    public void babyCorpus_t1(){
        Huffman h = new Huffman("abc");
        byte[] compressed = h.compress("aabbccacbacababccbacac");
        assertEquals("aabbccacbacababccbacac", h.decompress(compressed));
    }
    
}
