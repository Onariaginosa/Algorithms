package t3;

import static org.junit.Assert.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.AfterClass;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestWatcher;
import org.junit.rules.Timeout;
import org.junit.runner.Description;

public class T3StateTest {
	
	 @Rule
	    public Timeout globalTimeout = Timeout.seconds(8);
	    
	    // Grade record-keeping
	    static int possible = 0, passed = 0;
	    
	    // the @Before method is run before every @Test
	    @Before
	    public void init () {
	        possible++;
	    }
	    
	    // Each time you pass a test, you get a point! Yay!
	    // [!] Requires JUnit 4+ to run
	    @Rule
	    public TestWatcher watchman = new TestWatcher() {
	        @Override
	        protected void succeeded(Description description) {
	            passed++;
	        }
	    };
	    
	    // Used for grading, reports the total number of tests
	    // passed over the total possible
	    @AfterClass
	    public static void gradeReport () {
	        System.out.println("============================");
	        System.out.println("Tests Complete");
	        System.out.println(passed + " / " + possible + " passed!");
	        if ((1.0 * passed / possible) >= 0.9) {
	            System.out.println("[!] Nice job!"); // Automated acclaim!
	        }
	        System.out.println("============================");
	    }
	    
//	    UNIT TESTING TO SEE IF GET TRANSITIONS WORKS PROPERLY

	@Test
	public void test1() {
		int[][] state = {
	            {2, 1, 2},
	            {1, 2, 1},
	            {5, 0, 6}
	        };
		T3State s = new T3State(true, state);
		Map<T3Action, T3State> correct = new HashMap<T3Action, T3State>();
		correct.put(new T3Action(1,2,1), s);
		correct.put(new T3Action(1,2,3), s);
		correct.put(new T3Action(1,2,5), s);
		
		Map<T3Action, T3State> transitions = s.getTransitions();
		assertEquals(correct.equals(transitions), true);
	}

}
